# This workflow deploys the Todo-App itself.
name: 05 - Update the Todo-App in staging

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

on:
  workflow_dispatch:
    inputs:
      docker-image-tag:
        description: "The Docker image to deploy"
        required: true
jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy Todo App
    if: ${{ false }}  # disabled for now as we ran out of AWS credits
    # if: github.ref == 'refs/heads/main'
    steps:

    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up JDK 17
      uses: actions/setup-java@v5
      with:
        distribution: 'temurin'
        java-version: 17
        cache: 'maven'

    - name: NPM install
      working-directory: cdk
      run: npm install

    - name: Deploy service stack
      working-directory: cdk
      run: npm run service:deploy -- --all -c dockerImageTag=${{ github.event.inputs.docker-image-tag }}

    # Each Service stack updates creates a new parameter stack that CloudFormation does not clean up for us.
    # This step deletes all "*Service-Parameters*" stacks except the latest one to keep the house clean.
    - name: Clean up old parameter stacks
      timeout-minutes: 30
      working-directory: cdk
      run: |
        aws cloudformation describe-stacks --region eu-central-1 --query "Stacks[].StackName" --output text | sed -e "s/\s\+/\n/g" | grep -e "staging-todo-app-Service-Parameters" | sort -r | tail -n+2 > stacks_to_be_deleted.txt
        for stack in $(cat stacks_to_be_deleted.txt); do aws cloudformation delete-stack --stack-name $stack --region eu-central-1;  done
