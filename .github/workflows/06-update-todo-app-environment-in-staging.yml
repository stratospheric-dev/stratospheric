# This workflow deploys all resources that are specific to the Todo-App, but not the app itself.
name: 06 - Update the Todo-App environment in staging

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

on:
  push:
    paths:
      - 'cdk/**/*ActiveMq*'
      - 'cdk/**/*Cognito*'
      - 'cdk/**/*Database*'
      - 'cdk/**/*Messaging*'
      - 'cdk/**/*DeploymentSequencer*'
      - 'cdk/**/*Monitoring*'
      - 'cdk/**/*DynamoDb*'
      - 'cdk/pom.xml'
      - '.github/workflows/06-update-todo-app-environment-in-staging.yml'
  workflow_dispatch:
jobs:
  deploy-messaging-stack:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    name: Deploy the Messaging stack
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: NPM install
        working-directory: cdk
        run: npm install

      - name: Deploy Messaging stack
        working-directory: cdk
        run: npm run messaging:deploy

  deploy-database-stack:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    name: Deploy the Database stack
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: NPM install
        working-directory: cdk
        run: npm install

      - name: Deploy Database stack
        working-directory: cdk
        run: npm run database:deploy

  deploy-dynamo-db-stack:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    name: Deploy the DynamoDb stack
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: NPM install
        working-directory: cdk
        run: npm install

      - name: Deploy DynamoDb stack
        working-directory: cdk
        run: npm run dynamo:deploy

  deploy-cognito-stack:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    name: Deploy the Cognito stack
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: NPM install
        working-directory: cdk
        run: npm install

      - name: Deploy Cognito stack
        working-directory: cdk
        run: npm run cognito:deploy

  deploy-activemq-stack:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    name: Deploy the ActiveMq stack
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: NPM install
        working-directory: cdk
        run: npm install

      - name: Deploy ActiveMq stack
        working-directory: cdk
        run: npm run activeMq:deploy

  deploy-sequencer-lambda:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    name: Deploy the Deployment Sequencer stack
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: NPM install CDK dependencies
        working-directory: cdk
        run: npm install

      - name: NPM install Deployment Sequencer dependencies
        working-directory: cdk/deployment-sequencer-lambda
        run: npm install

      - name: Build Deployment Sequencer
        working-directory: cdk/deployment-sequencer-lambda
        run: npm run dist

      - name: Deploy Deployment Sequencer
        working-directory: cdk
        run: npm run deployment-sequencer:deploy -- -c githubToken=${{ secrets.GH_API_TOKEN }}

  deploy-monitoring-stack:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    name: Deploy the Monitoring stack
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: NPM install
        working-directory: cdk
        run: npm install

      - name: Deploy Monitoring stack
        working-directory: cdk
        run: npm run monitoring:deploy

  deploy-canary-stack:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    name: Deploy the Canary stack
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: NPM install
        working-directory: cdk
        run: npm install

      - name: Deploy Canary stack
        working-directory: cdk
        run: npm run canary:deploy -- -c canaryUserPassword=${{ secrets.CANARY_USER_PASSWORD }}
